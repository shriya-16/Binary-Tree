#include <iostream>
using namespace std;

class BST{
    public:
    int data;
    BST *left, *right;
    BST(int x){
        data = x;
        left = right = NULL;
    }
};

BST* Insert(BST* root, int value){
    if(root == NULL){
        root = new BST(value);
        return root;
    }
    if(value < root->data)
        root->left = Insert(root->left, value);
    else
        root->right = Insert(root->right, value);
    return root;
}

int lca(BST* root, int n1, int n2){
    
    while(root != NULL){
        if(root->data > n1 && root->data > n2)
            root = root->left;
        
        else if(root->data < n1 && root->data < n2)
            root = root->right;
        
        else
            break;
    }
    return root->data;
}

int main(){
    int n; cin >> n;
    int arr[n];
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    BST *root = NULL;
    for(int i = 0; i < n; i++)
        root = Insert(root, arr[i]);
    int n1, n2;
    cin >> n1 >> n2;
    cout << lca(root, n1, n2);
    return 0;
}
